name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:   # ðŸ‘ˆ allows manual trigger from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.12
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      # Step 3: Upgrade pip, setuptools, wheel, and pre-install Cython
      - name: Upgrade pip, setuptools, wheel, Cython
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install cython==0.29.36 "pyyaml<6.0.2"

      # Step 4: Install dependencies with compatibility fixes
      - name: Install dependencies
        run: |
          # Install project requirements
          pip install --use-deprecated=legacy-resolver -r requirements.txt
          # Extra tools
          pip install pytest dvc mlflow docker-compose

      # Step 5: Run tests (optional)
      - name: Run tests
        run: |
          echo "Running tests..."
          pytest || echo "No tests found, skipping."

      # Step 6: Run DVC + MLflow pipeline
      - name: Run DVC + MLflow pipeline
        run: |
          dvc pull
          python3 ingestion.py
          python3 preprocessing.py
          python3 model.py

      # Step 7: Build Docker image
      - name: Build Docker image
        run: docker build -t sumitdohanropar/mtp:latest .

      # Step 8: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 9: Push Docker image
      - name: Push Docker image
        run: docker push sumitdohanropar/mtp:latest

      # Step 10: Run Docker Compose (App + MLflow)
      - name: Run Docker Compose
        run: docker-compose up -d

      # Step 11: Wait for MLflow and FastAPI to be ready
      - name: Wait for services
        run: |
          echo "Waiting for MLflow on port 5001 and FastAPI on port 8000..."
          timeout 120 bash -c '
            until curl -s http://localhost:5001 >/dev/null && curl -s http://localhost:8000 >/dev/null; do
              sleep 5
            done
          '
          echo "Both MLflow and FastAPI are ready!"
